buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}
apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    jcenter()
}

android {
    compileSdkVersion 21
    buildToolsVersion '19.1.0'

    packagingOptions {
        exclude 'proguard-project.txt'
        exclude 'project.properties'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    defaultConfig {
        applicationId "com.amaze.filemanager"
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 11
        versionName "2.0"
    }

    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            /*manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src', 'src/main/java', 'src/main/java/']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res', 'src/main/res', 'src/main/res/']*/
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    productFlavors {
        fdroid {
            buildConfigField "boolean", "IS_VERSION_FDROID", "true"
        }
        play {
            buildConfigField "boolean", "IS_VERSION_FDROID", "false"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.afollestad:material-dialogs:0.7.4.1'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.github.junrar:junrar:0.7'
    compile 'org.apache.commons:commons-compress:1.8.1'
    // Google Play Services
    //playCompile 'com.google.android.gms:play-services-plus:6.5.87'
    playCompile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile project(':libs:StickyHeadersRecyclerView')
}

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
